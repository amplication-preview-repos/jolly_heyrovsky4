/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Mine } from "./Mine";
import { MineCountArgs } from "./MineCountArgs";
import { MineFindManyArgs } from "./MineFindManyArgs";
import { MineFindUniqueArgs } from "./MineFindUniqueArgs";
import { CreateMineArgs } from "./CreateMineArgs";
import { UpdateMineArgs } from "./UpdateMineArgs";
import { DeleteMineArgs } from "./DeleteMineArgs";
import { EmployeeFindManyArgs } from "../../employee/base/EmployeeFindManyArgs";
import { Employee } from "../../employee/base/Employee";
import { EquipmentFindManyArgs } from "../../equipment/base/EquipmentFindManyArgs";
import { Equipment } from "../../equipment/base/Equipment";
import { MaterialFindManyArgs } from "../../material/base/MaterialFindManyArgs";
import { Material } from "../../material/base/Material";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { MineService } from "../mine.service";
@graphql.Resolver(() => Mine)
export class MineResolverBase {
  constructor(protected readonly service: MineService) {}

  async _minesMeta(
    @graphql.Args() args: MineCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Mine])
  async mines(@graphql.Args() args: MineFindManyArgs): Promise<Mine[]> {
    return this.service.mines(args);
  }

  @graphql.Query(() => Mine, { nullable: true })
  async mine(@graphql.Args() args: MineFindUniqueArgs): Promise<Mine | null> {
    const result = await this.service.mine(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Mine)
  async createMine(@graphql.Args() args: CreateMineArgs): Promise<Mine> {
    return await this.service.createMine({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Mine)
  async updateMine(@graphql.Args() args: UpdateMineArgs): Promise<Mine | null> {
    try {
      return await this.service.updateMine({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Mine)
  async deleteMine(@graphql.Args() args: DeleteMineArgs): Promise<Mine | null> {
    try {
      return await this.service.deleteMine(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Employee], { name: "employees" })
  async findEmployees(
    @graphql.Parent() parent: Mine,
    @graphql.Args() args: EmployeeFindManyArgs
  ): Promise<Employee[]> {
    const results = await this.service.findEmployees(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Equipment], { name: "equipmentItems" })
  async findEquipmentItems(
    @graphql.Parent() parent: Mine,
    @graphql.Args() args: EquipmentFindManyArgs
  ): Promise<Equipment[]> {
    const results = await this.service.findEquipmentItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Material], { name: "materials" })
  async findMaterials(
    @graphql.Parent() parent: Mine,
    @graphql.Args() args: MaterialFindManyArgs
  ): Promise<Material[]> {
    const results = await this.service.findMaterials(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Report], { name: "reports" })
  async findReports(
    @graphql.Parent() parent: Mine,
    @graphql.Args() args: ReportFindManyArgs
  ): Promise<Report[]> {
    const results = await this.service.findReports(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
