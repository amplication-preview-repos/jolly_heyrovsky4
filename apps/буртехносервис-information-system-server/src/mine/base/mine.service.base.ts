/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Mine as PrismaMine,
  Employee as PrismaEmployee,
  Equipment as PrismaEquipment,
  Material as PrismaMaterial,
  Report as PrismaReport,
} from "@prisma/client";

export class MineServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MineCountArgs, "select">): Promise<number> {
    return this.prisma.mine.count(args);
  }

  async mines(args: Prisma.MineFindManyArgs): Promise<PrismaMine[]> {
    return this.prisma.mine.findMany(args);
  }
  async mine(args: Prisma.MineFindUniqueArgs): Promise<PrismaMine | null> {
    return this.prisma.mine.findUnique(args);
  }
  async createMine(args: Prisma.MineCreateArgs): Promise<PrismaMine> {
    return this.prisma.mine.create(args);
  }
  async updateMine(args: Prisma.MineUpdateArgs): Promise<PrismaMine> {
    return this.prisma.mine.update(args);
  }
  async deleteMine(args: Prisma.MineDeleteArgs): Promise<PrismaMine> {
    return this.prisma.mine.delete(args);
  }

  async findEmployees(
    parentId: string,
    args: Prisma.EmployeeFindManyArgs
  ): Promise<PrismaEmployee[]> {
    return this.prisma.mine
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employees(args);
  }

  async findEquipmentItems(
    parentId: string,
    args: Prisma.EquipmentFindManyArgs
  ): Promise<PrismaEquipment[]> {
    return this.prisma.mine
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .equipmentItems(args);
  }

  async findMaterials(
    parentId: string,
    args: Prisma.MaterialFindManyArgs
  ): Promise<PrismaMaterial[]> {
    return this.prisma.mine
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .materials(args);
  }

  async findReports(
    parentId: string,
    args: Prisma.ReportFindManyArgs
  ): Promise<PrismaReport[]> {
    return this.prisma.mine
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reports(args);
  }
}
