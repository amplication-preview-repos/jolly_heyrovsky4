/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MineService } from "../mine.service";
import { MineCreateInput } from "./MineCreateInput";
import { Mine } from "./Mine";
import { MineFindManyArgs } from "./MineFindManyArgs";
import { MineWhereUniqueInput } from "./MineWhereUniqueInput";
import { MineUpdateInput } from "./MineUpdateInput";
import { EmployeeFindManyArgs } from "../../employee/base/EmployeeFindManyArgs";
import { Employee } from "../../employee/base/Employee";
import { EmployeeWhereUniqueInput } from "../../employee/base/EmployeeWhereUniqueInput";
import { EquipmentFindManyArgs } from "../../equipment/base/EquipmentFindManyArgs";
import { Equipment } from "../../equipment/base/Equipment";
import { EquipmentWhereUniqueInput } from "../../equipment/base/EquipmentWhereUniqueInput";
import { MaterialFindManyArgs } from "../../material/base/MaterialFindManyArgs";
import { Material } from "../../material/base/Material";
import { MaterialWhereUniqueInput } from "../../material/base/MaterialWhereUniqueInput";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { ReportWhereUniqueInput } from "../../report/base/ReportWhereUniqueInput";

export class MineControllerBase {
  constructor(protected readonly service: MineService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Mine })
  async createMine(@common.Body() data: MineCreateInput): Promise<Mine> {
    return await this.service.createMine({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        location: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Mine] })
  @ApiNestedQuery(MineFindManyArgs)
  async mines(@common.Req() request: Request): Promise<Mine[]> {
    const args = plainToClass(MineFindManyArgs, request.query);
    return this.service.mines({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        location: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Mine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mine(
    @common.Param() params: MineWhereUniqueInput
  ): Promise<Mine | null> {
    const result = await this.service.mine({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        location: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Mine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMine(
    @common.Param() params: MineWhereUniqueInput,
    @common.Body() data: MineUpdateInput
  ): Promise<Mine | null> {
    try {
      return await this.service.updateMine({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          location: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Mine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMine(
    @common.Param() params: MineWhereUniqueInput
  ): Promise<Mine | null> {
    try {
      return await this.service.deleteMine({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          location: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/employees")
  @ApiNestedQuery(EmployeeFindManyArgs)
  async findEmployees(
    @common.Req() request: Request,
    @common.Param() params: MineWhereUniqueInput
  ): Promise<Employee[]> {
    const query = plainToClass(EmployeeFindManyArgs, request.query);
    const results = await this.service.findEmployees(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        position: true,

        mine: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employees")
  async connectEmployees(
    @common.Param() params: MineWhereUniqueInput,
    @common.Body() body: EmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employees: {
        connect: body,
      },
    };
    await this.service.updateMine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employees")
  async updateEmployees(
    @common.Param() params: MineWhereUniqueInput,
    @common.Body() body: EmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employees: {
        set: body,
      },
    };
    await this.service.updateMine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employees")
  async disconnectEmployees(
    @common.Param() params: MineWhereUniqueInput,
    @common.Body() body: EmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employees: {
        disconnect: body,
      },
    };
    await this.service.updateMine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/equipmentItems")
  @ApiNestedQuery(EquipmentFindManyArgs)
  async findEquipmentItems(
    @common.Req() request: Request,
    @common.Param() params: MineWhereUniqueInput
  ): Promise<Equipment[]> {
    const query = plainToClass(EquipmentFindManyArgs, request.query);
    const results = await this.service.findEquipmentItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,

        mine: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/equipmentItems")
  async connectEquipmentItems(
    @common.Param() params: MineWhereUniqueInput,
    @common.Body() body: EquipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentItems: {
        connect: body,
      },
    };
    await this.service.updateMine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/equipmentItems")
  async updateEquipmentItems(
    @common.Param() params: MineWhereUniqueInput,
    @common.Body() body: EquipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentItems: {
        set: body,
      },
    };
    await this.service.updateMine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/equipmentItems")
  async disconnectEquipmentItems(
    @common.Param() params: MineWhereUniqueInput,
    @common.Body() body: EquipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      equipmentItems: {
        disconnect: body,
      },
    };
    await this.service.updateMine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/materials")
  @ApiNestedQuery(MaterialFindManyArgs)
  async findMaterials(
    @common.Req() request: Request,
    @common.Param() params: MineWhereUniqueInput
  ): Promise<Material[]> {
    const query = plainToClass(MaterialFindManyArgs, request.query);
    const results = await this.service.findMaterials(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        quantity: true,

        mine: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/materials")
  async connectMaterials(
    @common.Param() params: MineWhereUniqueInput,
    @common.Body() body: MaterialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      materials: {
        connect: body,
      },
    };
    await this.service.updateMine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/materials")
  async updateMaterials(
    @common.Param() params: MineWhereUniqueInput,
    @common.Body() body: MaterialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      materials: {
        set: body,
      },
    };
    await this.service.updateMine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/materials")
  async disconnectMaterials(
    @common.Param() params: MineWhereUniqueInput,
    @common.Body() body: MaterialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      materials: {
        disconnect: body,
      },
    };
    await this.service.updateMine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/reports")
  @ApiNestedQuery(ReportFindManyArgs)
  async findReports(
    @common.Req() request: Request,
    @common.Param() params: MineWhereUniqueInput
  ): Promise<Report[]> {
    const query = plainToClass(ReportFindManyArgs, request.query);
    const results = await this.service.findReports(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        title: true,

        mine: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reports")
  async connectReports(
    @common.Param() params: MineWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        connect: body,
      },
    };
    await this.service.updateMine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reports")
  async updateReports(
    @common.Param() params: MineWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        set: body,
      },
    };
    await this.service.updateMine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reports")
  async disconnectReports(
    @common.Param() params: MineWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        disconnect: body,
      },
    };
    await this.service.updateMine({
      where: params,
      data,
      select: { id: true },
    });
  }
}
