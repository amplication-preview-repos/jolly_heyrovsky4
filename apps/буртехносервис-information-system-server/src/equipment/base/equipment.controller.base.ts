/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EquipmentService } from "../equipment.service";
import { EquipmentCreateInput } from "./EquipmentCreateInput";
import { Equipment } from "./Equipment";
import { EquipmentFindManyArgs } from "./EquipmentFindManyArgs";
import { EquipmentWhereUniqueInput } from "./EquipmentWhereUniqueInput";
import { EquipmentUpdateInput } from "./EquipmentUpdateInput";

export class EquipmentControllerBase {
  constructor(protected readonly service: EquipmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Equipment })
  async createEquipment(
    @common.Body() data: EquipmentCreateInput
  ): Promise<Equipment> {
    return await this.service.createEquipment({
      data: {
        ...data,

        mine: data.mine
          ? {
              connect: data.mine,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,

        mine: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Equipment] })
  @ApiNestedQuery(EquipmentFindManyArgs)
  async equipmentItems(@common.Req() request: Request): Promise<Equipment[]> {
    const args = plainToClass(EquipmentFindManyArgs, request.query);
    return this.service.equipmentItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,

        mine: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Equipment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async equipment(
    @common.Param() params: EquipmentWhereUniqueInput
  ): Promise<Equipment | null> {
    const result = await this.service.equipment({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,

        mine: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Equipment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEquipment(
    @common.Param() params: EquipmentWhereUniqueInput,
    @common.Body() data: EquipmentUpdateInput
  ): Promise<Equipment | null> {
    try {
      return await this.service.updateEquipment({
        where: params,
        data: {
          ...data,

          mine: data.mine
            ? {
                connect: data.mine,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          typeField: true,

          mine: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Equipment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEquipment(
    @common.Param() params: EquipmentWhereUniqueInput
  ): Promise<Equipment | null> {
    try {
      return await this.service.deleteEquipment({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          typeField: true,

          mine: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
